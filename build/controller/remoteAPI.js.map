{"version":3,"file":"remoteAPI.js","names":["axios","require","axiosRetry","RemoteAPI","updateRemoteApi","req","res","new1","new2","body","console","log","data","get","prevNew1","method","url","retries","retryDelay","retryCount","retryCondition","error","response","status","catch","err","put","json","message"],"sources":["../../src/controller/remoteAPI.js"],"sourcesContent":["const axios = require('axios');\nconst axiosRetry = require('axios-retry');\n\nclass RemoteAPI {\n  static async updateRemoteApi(req, res) {\n    const { new1, new2 } = req.body;\n    console.log(new1, new1, 'data from request body');\n    try {\n      // GET THE INITIAL VALUE FROM RESOURCE1 BEFORE ALTERING IT\n      const { data } = await axios.get('https://api/resource1');\n      const prevNew1 = data.new1;\n\n      // MAKE A PUT REQUEST TO ALTER RESOURCE1\n      await axios({\n        method: 'PUT',\n        url: '/api/resource1',\n        data: {\n          new1,\n        },\n      });\n\n      // SET AXIOS TO RETRY EACH REQUEST 3 TIMES\n      axiosRetry(axios, {\n        retries: 3,\n        retryDelay: (retryCount) => {\n          console.log(`retry attempt: ${retryCount}`);\n          return retryCount * 2000; // time interval between retries\n        },\n        retryCondition: (error) => error.response.status === 503,\n      });\n\n      // MAKE A PUT REQUEST TO ALTER RESOURCE2 RETRYING 3 TIMES IF IT FAILS ON ANY\n      axios({\n        method: 'PUT',\n        url: '/api/resource2',\n        data: {\n          new2,\n        },\n      }).catch(async (err) => {\n        if (err.response.status !== 200) {\n          // REVERT THE RESOURCE1 WHEN UPDATE TO RESOURCE2 FAILS\n          await axios.put('/api/resource1', {\n            new1: prevNew1,\n          });\n\n          res.status(err.response.status).json({\n            status: 'fail',\n            message: `API call failed with status code: ${err.response.status} after 3 retry attempts`,\n          });\n        }\n      });\n      res.status(200).json({\n        status: 'success',\n        message: `Transaction successfully completed!`,\n      });\n    } catch (err) {\n      res.status(500).json({\n        status: 'fail',\n        message: `API call failed with the error: ${err.message}`,\n      });\n    }\n  }\n}\n\nexport default RemoteAPI;\n"],"mappings":";;;;;;;AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,aAAD,CAA1B;;AAEA,MAAME,SAAN,CAAgB;EACc,aAAfC,eAAe,CAACC,GAAD,EAAMC,GAAN,EAAW;IACrC,MAAM;MAAEC,IAAF;MAAQC;IAAR,IAAiBH,GAAG,CAACI,IAA3B;IACAC,OAAO,CAACC,GAAR,CAAYJ,IAAZ,EAAkBA,IAAlB,EAAwB,wBAAxB;;IACA,IAAI;MACF;MACA,MAAM;QAAEK;MAAF,IAAW,MAAMZ,KAAK,CAACa,GAAN,CAAU,uBAAV,CAAvB;MACA,MAAMC,QAAQ,GAAGF,IAAI,CAACL,IAAtB,CAHE,CAKF;;MACA,MAAMP,KAAK,CAAC;QACVe,MAAM,EAAE,KADE;QAEVC,GAAG,EAAE,gBAFK;QAGVJ,IAAI,EAAE;UACJL;QADI;MAHI,CAAD,CAAX,CANE,CAcF;;MACAL,UAAU,CAACF,KAAD,EAAQ;QAChBiB,OAAO,EAAE,CADO;QAEhBC,UAAU,EAAGC,UAAD,IAAgB;UAC1BT,OAAO,CAACC,GAAR,CAAa,kBAAiBQ,UAAW,EAAzC;UACA,OAAOA,UAAU,GAAG,IAApB,CAF0B,CAEA;QAC3B,CALe;QAMhBC,cAAc,EAAGC,KAAD,IAAWA,KAAK,CAACC,QAAN,CAAeC,MAAf,KAA0B;MANrC,CAAR,CAAV,CAfE,CAwBF;;MACAvB,KAAK,CAAC;QACJe,MAAM,EAAE,KADJ;QAEJC,GAAG,EAAE,gBAFD;QAGJJ,IAAI,EAAE;UACJJ;QADI;MAHF,CAAD,CAAL,CAMGgB,KANH,CAMS,MAAOC,GAAP,IAAe;QACtB,IAAIA,GAAG,CAACH,QAAJ,CAAaC,MAAb,KAAwB,GAA5B,EAAiC;UAC/B;UACA,MAAMvB,KAAK,CAAC0B,GAAN,CAAU,gBAAV,EAA4B;YAChCnB,IAAI,EAAEO;UAD0B,CAA5B,CAAN;UAIAR,GAAG,CAACiB,MAAJ,CAAWE,GAAG,CAACH,QAAJ,CAAaC,MAAxB,EAAgCI,IAAhC,CAAqC;YACnCJ,MAAM,EAAE,MAD2B;YAEnCK,OAAO,EAAG,qCAAoCH,GAAG,CAACH,QAAJ,CAAaC,MAAO;UAF/B,CAArC;QAID;MACF,CAlBD;MAmBAjB,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBI,IAAhB,CAAqB;QACnBJ,MAAM,EAAE,SADW;QAEnBK,OAAO,EAAG;MAFS,CAArB;IAID,CAhDD,CAgDE,OAAOH,GAAP,EAAY;MACZnB,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBI,IAAhB,CAAqB;QACnBJ,MAAM,EAAE,MADW;QAEnBK,OAAO,EAAG,mCAAkCH,GAAG,CAACG,OAAQ;MAFrC,CAArB;IAID;EACF;;AA1Da;;eA6DDzB,S"}